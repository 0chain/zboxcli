# syntax=docker/dockerfile:latest

ARG BASE_IMAGE

# Stage 1: Build zboxcli on the base image
FROM --platform=$BUILDPLATFORM ${BASE_IMAGE} AS builder

RUN set -e

# Install dependencies
RUN echo "Installing dependencies" \
    && apt-get update && \
    apt-get install -y wget tar software-properties-common dpkg && \
    add-apt-repository ppa:ubuntu-toolchain-r/test && \
    apt-get update && \
    apt-get install -y gcc-11 g++-11

# Set gcc-11 as default
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100 && \
    update-alternatives --set gcc /usr/bin/gcc-11 && \
    update-alternatives --set g++ /usr/bin/g++-11

# print architecture
RUN dpkg --print-architecture

# Download and install Go
ARG GO_VERSION=1.21.0
RUN echo "Downloading and installing Go version ${GO_VERSION} for architecture ${TARGETARCH}" && \
    wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz -O /tmp/go.tar.gz && \
    tar -C /usr/local -xzf /tmp/go.tar.gz && \
    ln -s /usr/local/go/bin/go /usr/local/bin/go

# Set Go environment variables
ENV GOROOT=/usr/local/go
ENV GOPATH=/root/go
ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# Setting up working directory and copying files
WORKDIR /zboxcli
COPY . .

# Building zboxcli
ARG VERSION
RUN go env
RUN CC=gcc-11 CXX=g++-11 CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -x -v -tags bn256 -ldflags "-X main.VersionStr=${VERSION}" -o /zbox .

