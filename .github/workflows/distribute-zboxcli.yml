name: Build, Distribute and Test zbox

on:
  push:
    branches:
      - main
      - packaging

env:
  APP_NAME: zbox
  APP_VERSION: 1.16.0-1
  GO_VERSION: 1.21.0
  SRC_DIR: ${{ github.workspace }}/src
  OUTPUT_DIR: ${{ github.workspace }}/output
  PACKAGE_DIR: ${{ github.workspace }}/package
  DEB_DIR: ${{ github.workspace }}/deb
  REPO_DIR: ${{ github.workspace }}/aptrepo
  GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
  DISTRIBUTIONS: focal
  ARCHITECTURES: amd64
  REMOTE_SERVER: 
  REMOTE_USER: 
  REMOTE_PATH: 

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - name: focal
            base_image: ubuntu-20.04
        arch:
          - name: amd64
            platform: linux/amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        path: ${{ env.SRC_DIR }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io tar gnupg dpkg-sig

    - name: Setup directories
      run: |
        mkdir -p ${{ env.DEB_DIR }}
        mkdir -p ${{ env.OUTPUT_DIR }}
        mkdir -p ${{ env.PACKAGE_DIR }}

    - name: Build Docker image
      run: |
        docker buildx build \
          --platform ${{ matrix.arch.platform }} \
          --build-arg GO_VERSION=${{ env.GO_VERSION }} \
          --build-arg BASE_IMAGE=${{ matrix.distro.base_image }} \
          --build-arg TARGETARCH=${{ matrix.arch.name }} \
          --build-arg VERSION=${{ env.APP_VERSION }} \
          --tag ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.distro.name }}-${{ matrix.arch.name }} \
          --load \
          --output type=docker,dest=${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.distro.name }}-${{ matrix.arch.name }}.tar \
          -f ${{ env.SRC_DIR }}/scripts/debian/Dockerfile ${{ env.SRC_DIR }}

    - name: Load Docker image
      run: |
        docker load -i ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.distro.name }}-${{ matrix.arch.name }}.tar

    - name: Extract binary from container
      run: |
        CONTAINER_ID=$(docker create ${{ env.APP_NAME }}-${{ env.APP_VERSION }}-${{ matrix.distro.name }}-${{ matrix.arch.name }})
        docker cp ${CONTAINER_ID}:/zbox ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}_${{ env.APP_VERSION }}~${{ matrix.distro.name }}_${{ matrix.arch.name }}
        docker rm ${CONTAINER_ID}

    - name: Package binary
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        mkdir -p ${{ env.PACKAGE_DIR }}/usr/local/bin

        cp ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}_${{ env.APP_VERSION }}~${{ matrix.distro.name }}_${{ matrix.arch.name }} ${{ env.PACKAGE_DIR }}/usr/local/bin/

        cat <<EOT > ${{ env.PACKAGE_DIR }}/DEBIAN/control
        Package: ${{ env.APP_NAME }}
        Version: ${{ env.APP_VERSION }}
        Architecture: ${{ matrix.arch.name }}
        Maintainer: none <no-reply@gmail.com>
        Description: zbox is a command line interface (CLI) tool to understand the capabilities of ZÃ¼s dStorage and prototype your app
        EOT

        tar czf "${{ env.OUTPUT_DIR }}/data.tar.gz" -C "${{ env.PACKAGE_DIR }}" .
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor -o "${{ env.PACKAGE_DIR }}/DEBIAN/signature.asc" "${{ env.OUTPUT_DIR }}/data.tar.gz"
        dpkg-deb -b ${{ env.PACKAGE_DIR }} ${{ env.DEB_DIR }}/${{ env.APP_NAME }}_${{ env.APP_VERSION }}~${{ matrix.distro.name }}_${{ matrix.arch.name }}.deb

  distribute:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-utils dpkg-sig gnupg

    - name: Download APT repo
      run: |
          mkdir -p ${{ env.REPO_DIR }}
          scp -i ${{ secrets.SSH_KEY }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }}:${{ env.REMOTE_PATH }}/* ${{ env.REPO_DIR }}

    - name: Copy debian packages
      run : |
            mkdir -p ${{ env.REPO_DIR }}/pool/main/z/${APP_NAME}/
            cp ${{ env.DEB_DIR }}/*.deb ${{ env.REPO_DIR }}/pool/main/z/${APP_NAME}/

    - name: Update APT repo
      run: |
        cd ${{ env.REPO_DIR }}
        for dist in ${{ env.DISTRIBUTIONS }}; do
          for arch in ${{ env.ARCHITECTURES }}; do
            mkdir -p dists/${dist}/main/binary-${arch}
            apt-ftparchive packages pool/main > dists/${dist}/main/binary-${arch}/Packages
          done
          apt-ftparchive release -o APT::FTPArchive::Release::Origin="${{ env.APP_NAME }}" \
                      -o APT::FTPArchive::Release::Label="${{ env.APP_NAME }}" \
                      -o APT::FTPArchive::Release::Suite="${dist}" \
                      -o APT::FTPArchive::Release::Codename="${dist}" \
                      -o APT::FTPArchive::Release::Version="${{ env.APP_VERSION }}" \
                      -o APT::FTPArchive::Release::Architectures="${{ env.ARCHITECTURES }}" \
                      -o APT::FTPArchive::Release::Components="main" \
                      dists/${dist} > dists/${dist}/Release

          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --default-key ${GPG_KEY_ID} --batch --yes --passphrase-fd 0 -abs -o dists/${dist}/Release.gpg dists/${dist}/Release
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --default-key ${GPG_KEY_ID} --batch --yes --passphrase-fd 0 --clearsign -o dists/${dist}/InRelease dists/${dist}/Release
        done

    - name: Upload APT repo to remote
      run: |
        scp -i ${{ secrets.SSH_KEY }} -r ${{ env.REPO_DIR }}/* ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }}:${{ env.REMOTE_PATH }}